{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u043d\u0430 \u0418\u0432\u0435\u043d\u043a\u043e\u0432\u0430, \u0433\u0440\u0443\u043f\u043f\u0430 K34422","text":""},{"location":"lab1/auth/","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","text":""},{"location":"lab1/auth/#_2","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b","text":"<pre><code>from passlib.context import CryptContext\nfrom jose import JWTError, jwt\nfrom pathlib import Path\nfrom dotenv import dotenv_values\nimport datetime\nfrom fastapi import Depends\nfrom fastapi.security import OAuth2PasswordBearer\nfrom typing import Annotated\nimport db_queries\n\n#dotenv setup\nenv_path = Path(__file__).parent / '.env'\nconfig = dotenv_values(env_path)\n# jwt setup\nSECRET_KEY = config['JWT_SECRET_KEY']\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 800000\n# hasher setup\ncrypto_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n# auth scheme setup\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\ndef verify_password(provided_password, actual_hash):\n    return crypto_context.verify(provided_password, actual_hash)\n\n\ndef get_password_hash(password):\n    return crypto_context.hash(password)\n\n\ndef generate_token(username):\n    to_encode = {\n        'exp': datetime.datetime.now() + datetime.timedelta(\n            minutes=ACCESS_TOKEN_EXPIRE_MINUTES\n        ),\n        'iat': datetime.datetime.now(),\n        'sub': username\n    }\n    return jwt.encode(\n        to_encode,\n        SECRET_KEY,\n        algorithm=ALGORITHM\n    )\n\n\ndef decode_token(token):\n    return jwt.decode(\n        token,\n        SECRET_KEY,\n        ALGORITHM\n    )\n\n\ndef get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    return get_user_by_token(token)\n\n\ndef get_user_by_token(token):\n    token_data = decode_token(token)\n    username = token_data['sub']\n    return db_queries.get_user_by_username(username)\n</code></pre>"},{"location":"lab1/auth/#_3","title":"\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438","text":"<pre><code>@app.post('/token/', status_code=200, tags=[Tags.user])\ndef create_api_token(\n        user_login: models.UserLogin\n) -&gt; tp.TypedDict('token_response', {'access_token': str, 'token_type': str}):\n    try:\n        user_db = db_queries.get_user_by_username(user_login.username)\n    except ValueError:\n        raise HTTPException(status_code=400, detail=f'no user with username {user_login.username}')\n\n    is_password_correct = auth.verify_password(user_login.password, user_db.hashed_password)\n    if not is_password_correct:\n        raise HTTPException(status_code=400, detail=f'Incorrect password for username: {user_login.username}')\n\n    token = auth.generate_token(user_login.username)\n    return {'access_token': token, 'token_type': 'bearer'}\n\n@app.post('/user/', status_code=201, tags=[Tags.user])\ndef create_user(\n        user: models.UserRegister,\n        session:Session=Depends(get_session_depends)\n)-&gt; tp.TypedDict('Created message', {'msg': str}):\n    hashed_password = auth.get_password_hash(user.password)\n    user_data = user.dict()\n    user_data['hashed_password'] = hashed_password\n    user = models.User.model_validate(user_data)\n    tools.add_object_to_db_and_refresh(session, user)\n    return {'msg': \"Created\"}\n\n\n@app.put('/user/password/', status_code=201, tags=[Tags.user])\ndef change_user_password(\n        user_password: models.UserChangePassword,\n        user_db: models.User = Depends(auth.get_current_user),\n        session: Session = Depends(get_session_depends)\n) -&gt; tp.TypedDict('password_put_response', {'msg': str}):\n    is_password_correct = auth.verify_password(user_password.current_password, user_db.hashed_password)\n    if not is_password_correct:\n        raise HTTPException(status_code=400, detail='Incorrect current password')\n\n    if user_password.new_password != user_password.new_password_verification:\n        raise HTTPException(status_code=400, detail='Passwords don\\'t match')\n\n    new_hash = auth.get_password_hash(user_password.new_password)\n    user_db.hashed_password = new_hash\n    session.add(user_db)\n    session.commit()\n    return {'msg': 'password changed'}\n</code></pre>"},{"location":"lab1/db/","title":"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0411\u0414","text":"<pre><code>from sqlmodel import SQLModel, Session, create_engine\nfrom dotenv import dotenv_values\nfrom pathlib import Path\nfrom contextlib import contextmanager\n\nenv_path = Path(__file__).parent / '.env'\nconfig = dotenv_values(env_path)\ndb_url = config['DB_ADMIN']\nengine = create_engine(db_url)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\n@contextmanager\ndef get_session_func() -&gt; Session:\n    session = Session(engine)\n    try:\n        yield session\n    finally:\n        session.close()\n\n\ndef get_session_depends() -&gt; Session:\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lab1/endpoints/","title":"Endpoints","text":""},{"location":"lab1/endpoints/#_1","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c\u0438 \u0442\u043e\u0447\u043a\u0430\u043c\u0438","text":"<pre><code>from fastapi import HTTPException\nimport models\nfrom sqlmodel import Session, select, SQLModel\nimport typing as tp\n\n\ndef add_object_to_db_and_refresh(session: Session, object: SQLModel):\n    session.add(object)\n    session.commit()\n    session.refresh(object)\n\n\nclass ProjectValidator:\n    _object = None\n\n    def __init__(self, session, user_id, object_id):\n        self._session = session\n        self._user_id = user_id\n        self._object_id = object_id\n        self._project = self._retrieve_project()\n\n\n    @property\n    def object(self) -&gt; models.Project:\n        if self._object is None:\n            self._object = self._retrieve_object_or_exception()\n        return self._object\n\n    def _retrieve_project(self) -&gt; models.Project:\n        return self.object\n\n    def _retrieve_object_or_exception(self) -&gt; models.Project:\n        project = self._session.get(models.Project, self._object_id)\n        if project is None:\n            raise HTTPException(\n                status_code=404,\n                detail=f'Project with id={self.object.id} is not found'\n            )\n        return project\n\n    def is_admin_or_exception(self):\n        statement = select(models.ProjectUserLink) \\\n            .where(models.ProjectUserLink.user_id == self._user_id) \\\n            .where(models.ProjectUserLink.user_id == self._project.id)\n        user_entries: tp.List[models.ProjectUserLink] = list(\n            self._session.exec(statement).all()\n        )\n        for entry in user_entries:\n            if entry.role == models.Role.admin:\n                return\n        raise HTTPException(\n            status_code=403,\n            detail=f'you\\'re not admin of project with id={self._project.id}'\n        )\n\n    def is_in_project_or_exception(self):\n        statement = select(models.ProjectUserLink) \\\n            .where(models.ProjectUserLink.user_id == self._user_id) \\\n            .where(models.ProjectUserLink.user_id == self._project.id)\n        user_entries: tp.List[models.ProjectUserLink] = list(self._session.exec(statement).all())\n        if len(user_entries) == 0:\n            raise HTTPException(\n                status_code=403,\n                detail=f'You\\'re not allowed to view project with id={self._project.id}'\n            )\n\n\nclass CategoryValidator(ProjectValidator):\n\n    def _retrieve_project(self) -&gt; models.Project:\n        return self.object.project\n\n    def _retrieve_object_or_exception(self) -&gt; models.Category:\n        category = self._session.get(models.Category, self._object_id)\n        if category is None:\n            raise HTTPException(\n                status_code=404,\n                detail=f'Category with id={self._object_id} is not found'\n            )\n        return category\n\n\nclass TaskValidator(CategoryValidator):\n    def _retrieve_project(self) -&gt; models.Project:\n        return self.object.category.project\n\n    def _retrieve_object_or_exception(self) -&gt; models.Task:\n        task = self._session.get(models.Task, self._object_id)\n        if task is None:\n            raise HTTPException(\n                status_code=404,\n                detail=f'Task with id={self._object_id} is not found'\n            )\n        return task\n</code></pre>"},{"location":"lab1/endpoints/#_2","title":"\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException\nimport models\nfrom sqlmodel import Session, select\nfrom db import init_db, get_session_depends\nimport db_queries\nimport auth\nfrom enum import Enum\nimport typing as tp\nfrom endpoints import endpoint_tools as tools\n\napp = FastAPI()\n\n\nclass Tags(Enum):\n    user = 'user'\n    project = 'project'\n    category = 'category'\n    task = 'task'\n\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n\n\n\n# ------------------Token-----------------\n@app.post('/token/', status_code=200, tags=[Tags.user])\ndef create_api_token(\n        user_login: models.UserLogin\n) -&gt; tp.TypedDict('token_response', {'access_token': str, 'token_type': str}):\n    try:\n        user_db = db_queries.get_user_by_username(user_login.username)\n    except ValueError:\n        raise HTTPException(status_code=400, detail=f'no user with username {user_login.username}')\n\n    is_password_correct = auth.verify_password(user_login.password, user_db.hashed_password)\n    if not is_password_correct:\n        raise HTTPException(status_code=400, detail=f'Incorrect password for username: {user_login.username}')\n\n    token = auth.generate_token(user_login.username)\n    return {'access_token': token, 'token_type': 'bearer'}\n\n\n# ------------------User-------------------\n\n@app.get('/user/{user_id}', status_code=200, tags=[Tags.user])\ndef get_user_by_id(\n        user_id: int,\n        session: Session = Depends(get_session_depends)\n) -&gt; models.UserGet:\n    user = session.get(models.User, user_id)\n    if user is None:\n        raise HTTPException(\n            status_code=404,\n            detail=f'user with user_id={user_id} not found'\n        )\n    user_get = models.UserGet.model_validate(user)\n    return user_get\n\n\n@app.get('/user/', status_code=200, tags=[Tags.user])\ndef get_current_user(\n        user_db:models.User = Depends(auth.get_current_user)\n) -&gt; models.UserGet:\n    user_get = models.UserGet.model_validate(user_db)\n    return user_get\n\n@app.get('/user/list/', status_code=200, tags=[Tags.user])\ndef get_list_of_users(\n    session: Session = Depends(get_session_depends)\n)-&gt; tp.List[models.UserGet]:\n    query = select(models.User)\n    user_db_list = session.exec(query).all()\n    user_get_list = [\n        models.UserGet.model_validate(user) for user in user_db_list\n    ]\n    return user_get_list\n\n\n@app.post('/user/', status_code=201, tags=[Tags.user])\ndef create_user(\n        user: models.UserRegister,\n        session:Session=Depends(get_session_depends)\n)-&gt; tp.TypedDict('Created message', {'msg': str}):\n    hashed_password = auth.get_password_hash(user.password)\n    user_data = user.dict()\n    user_data['hashed_password'] = hashed_password\n    user = models.User.model_validate(user_data)\n    tools.add_object_to_db_and_refresh(session, user)\n    return {'msg': \"Created\"}\n\n\n@app.put('/user/password/', status_code=201, tags=[Tags.user])\ndef change_user_password(\n        user_password: models.UserChangePassword,\n        user_db: models.User = Depends(auth.get_current_user),\n        session: Session = Depends(get_session_depends)\n) -&gt; tp.TypedDict('password_put_response', {'msg': str}):\n    is_password_correct = auth.verify_password(user_password.current_password, user_db.hashed_password)\n    if not is_password_correct:\n        raise HTTPException(status_code=400, detail='Incorrect current password')\n\n    if user_password.new_password != user_password.new_password_verification:\n        raise HTTPException(status_code=400, detail='Passwords don\\'t match')\n\n    new_hash = auth.get_password_hash(user_password.new_password)\n    user_db.hashed_password = new_hash\n    session.add(user_db)\n    session.commit()\n    return {'msg': 'password changed'}\n\n\n\n\n# ------------Project---------------\n\n@app.get('/project/{project_id}', status_code=200, tags=[Tags.project])\ndef get_project_info(\n        project_id: int,\n        user_db: models.User = Depends(auth.get_current_user),\n        session: Session = Depends(get_session_depends)\n) -&gt; models.ProjectBase:\n    project_validator = tools.ProjectValidator(session, user_db.id, project_id)\n    project_validator.is_in_project_or_exception()\n    project = project_validator.object\n    project_base = models.ProjectBase.model_validate(project)\n    return project_base\n\n\n@app.get('/project/', status_code=200, tags=[Tags.project])\ndef get_user_project_list(\n    user_db: models.User = Depends(auth.get_current_user),\n    session: Session = Depends(get_session_depends)\n):\n    statement = select(models.ProjectUserLink) \\\n        .where(models.ProjectUserLink.user_id == user_db.id)\n    user_entries: tp.List[models.ProjectUserLink] = list(session.exec(statement).all())\n    return [entry.project for entry in user_entries]\n\n\n@app.post('/project/', status_code=201, tags=[Tags.project])\ndef create_project(\n        project: models.ProjectBase,\n        user_db: models.User = Depends(auth.get_current_user),\n        session: Session = Depends(get_session_depends)\n) -&gt; tp.TypedDict('post_project', {'msg': str}):\n    project = models.Project.model_validate(project)\n    tools.add_object_to_db_and_refresh(session, project)\n    # add creator as project admin\n    link = models.ProjectUserLink(\n        user_id=user_db.id,\n        project_id=project.id,\n        role=models.Role.admin\n    )\n    tools.add_object_to_db_and_refresh(session, link)\n    return {'msg': 'Created'}\n\n\n@app.get('/project/{project_id}/user/', status_code=200, tags=[Tags.project])\ndef get_list_of_users_in_project(\n        project_id: int,\n        user_db: models.User = Depends(auth.get_current_user),\n        session: Session = Depends(get_session_depends)\n) -&gt; tp.List[models.UserGet]:\n    project_validator = tools.ProjectValidator(session, user_db.id, project_id)\n    project_validator.is_in_project_or_exception()\n    project = project_validator.object\n    users = project.users\n    users_get = [models.UserGet.model_validate(user) for user in users]\n    return users_get\n\n\n@app.post('/project/{project_id}/user/', status_code=200, tags=[Tags.project])\ndef add_user_to_project(\n        project_id: int,\n        user_in_project: models.UserInProjectForm,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; tp.TypedDict('add_to_project', {'msg': str}):\n    project_validator = tools.ProjectValidator(session, user_db.id, project_id)\n    project_validator.is_admin_or_exception()\n    data_for_link = user_in_project.dict()\n    data_for_link['project_id'] = project_id\n    link = models.ProjectUserLink.validate(data_for_link)\n    tools.add_object_to_db_and_refresh(session, link)\n    return {'msg': 'Created'}\n\n\n@app.get('/project/{project_id}/category/', status_code=200, tags=[Tags.project])\ndef get_project_categories(\n        project_id: int,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; tp.List[models.Category]:\n    project_validator = tools.ProjectValidator(session, user_db.id, project_id)\n    project_validator.is_in_project_or_exception()\n    project = project_validator.object\n    return project.categories\n\n\n@app.post('/project/{project_id}/category/', status_code=201, tags=[Tags.project])\ndef add_category_to_project(\n        project_id: int,\n        category: models.CategoryBase,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; tp.TypedDict('add_category', {'msg': str, 'object': models.Category}):\n    project_validator = tools.ProjectValidator(session, user_db.id, project_id)\n    project_validator.is_admin_or_exception()\n    category = category.dict()\n    category['project_id'] = project_id\n    category = models.Category.model_validate(category)\n    tools.add_object_to_db_and_refresh(session, category)\n    return {'msg': 'Created', 'object': category}\n\n\n@app.get('/project/{project_id}/task', status_code=200, tags=[Tags.project])\ndef get_project_tasks(\n        project_id: int,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; tp.List[models.CategoryWithBaseTasks]:\n    project_validator = tools.ProjectValidator(session, user_db.id, project_id)\n    project_validator.is_in_project_or_exception()\n    project = project_validator.object\n    return project.categories\n\n\n@app.get('/project/{project_id}/calendar_entries', status_code=200, tags=[Tags.project])\ndef get_project_calendar_entries(\n    project_id: int,\n    session: Session = Depends(get_session_depends),\n    user_db: models.User = Depends(auth.get_current_user)\n) -&gt; models.ProjectWithCalendarEntries:\n    project_validator = tools.ProjectValidator(session, user_db.id, project_id)\n    project = project_validator.object\n    project_validator.is_in_project_or_exception()\n    project_with_entries = models.ProjectWithCalendarEntries.model_validate(project)\n    return project_with_entries\n\n\n\n\n# -------------------Category---------------\n\n\n\n\n\n\n\n\n\n\n@app.get('/category/{category_id}/', status_code=200, tags=[Tags.category])\ndef get_category_info(\n    category_id: int,\n    session: Session = Depends(get_session_depends),\n    user_db: models.User = Depends(auth.get_current_user)\n) -&gt; models.CategoryBase:\n    category_validator = tools.CategoryValidator(session, user_db.id, category_id)\n    category = category_validator.object\n    category_validator.is_in_project_or_exception()\n    category_base = models.CategoryBase.model_validate(category)\n    return category_base\n\n\n@app.get('/category/{category_id}/task/', status_code=200, tags=[Tags.category])\ndef get_category_tasks(\n        category_id: int,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n):\n    category_validator = tools.CategoryValidator(session, user_db.id, category_id)\n    category = category_validator.object\n    category_validator.is_in_project_or_exception()\n    category_with_tasks = models.CategoryWithBaseTasks.model_validate(category)\n    return category_with_tasks\n\n\n\n@app.post('/category/{category_id}/task/', status_code=201, tags=[Tags.category])\ndef add_task_to_category(\n        category_id: int,\n        task: models.TaskBase,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; tp.TypedDict('task added', {'msg': str, 'obj': models.Task}):\n    category_validator = tools.CategoryValidator(session, user_db.id, category_id)\n    category_validator.is_admin_or_exception()\n\n    task_data = task.dict()\n    task_data['category_id'] = category_id\n    task = models.Task.model_validate(task_data)\n    tools.add_object_to_db_and_refresh(session, task)\n    return {'msg': 'Created', 'obj': task}\n\n\n@app.get('/category/{category_id}/calendar_entries', status_code=200, tags=[Tags.category])\ndef get_category_calendar_entries(\n        category_id: int,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; models.CategoryWithEntries:\n    category_validator = tools.CategoryValidator(session, user_db.id, category_id)\n    category_validator.is_in_project_or_exception()\n    category = category_validator.object\n    category_with_entries = models.CategoryWithEntries.model_validate(\n        category\n    )\n    return category_with_entries\n\n\n\n\n# ----------------------------Tasks-----------------------------\n\n\n\n\n@app.get('/task/{task_id}', status_code=200, tags=[Tags.task])\ndef get_task_info(\n        task_id: int,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; models.TaskBase:\n    task_validator = tools.TaskValidator(session, user_db.id, task_id)\n    task = task_validator.object\n    task_validator.is_in_project_or_exception()\n    task_base = models.TaskBase.model_validate(task)\n    return task_base\n\n\n@app.post('/task/{task_id}/calendar_entries/', status_code=201, tags=[Tags.task])\ndef add_calendar_entry_to_task(\n        task_id: int,\n        calendar_entry: models.CalendarEntryBase,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; tp.TypedDict('task added', {'msg': str, 'obj': models.CalendarEntry}):\n    task_validator = tools.TaskValidator(session, user_db.id, task_id)\n    task_validator.is_admin_or_exception()\n    calendar_entry_data = calendar_entry.dict()\n    calendar_entry_data['task_id'] = task_id\n    calendar_entry = models.CalendarEntry.model_validate(calendar_entry_data)\n    tools.add_object_to_db_and_refresh(session, calendar_entry)\n    return {'msg': 'Created', 'obj': calendar_entry}\n\n\n@app.get('/task/{task_id}/calendar_entries/', status_code=200, tags=[Tags.task])\ndef get_task_calendar_entries(\n        task_id: int,\n        session: Session = Depends(get_session_depends),\n        user_db: models.User = Depends(auth.get_current_user)\n) -&gt; models.TaskWithEntries:\n    task_validator = tools.TaskValidator(session, user_db.id, task_id)\n    task = task_validator.object\n    task_validator.is_in_project_or_exception()\n    task_with_entries = models.TaskWithEntries.model_validate(task)\n    return task_with_entries\n</code></pre>"},{"location":"lab1/main/","title":"\u0427\u0442\u043e \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e?","text":""},{"location":"lab1/main/#_2","title":"\u0417\u0430\u0434\u0430\u0447\u0430","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0448\u0438\u043a \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c:</p> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043f\u0440\u0430\u0432\u0430\u043c\u0438:<ul> <li>\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c</li> <li>\u0420\u0435\u0434\u0430\u043a\u0442\u043e\u0440</li> </ul> </li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u044b</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u043e\u043a\u043e\u0432 \u0438 \u0441\u0440\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438(\u0434\u0430\u0442\u0430,  \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430)</li> <li>\u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443, \u0438\u0437 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u0435</li> <li>\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u0445</li> </ul>"},{"location":"lab1/main/#_3","title":"\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438","text":"<ul> <li>FastAPI - backend framework</li> <li>SQLModel - ORM</li> <li>Alembic - \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439</li> <li>PostgreSQL - SQL \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>jose - \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 JWT \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438</li> <li>passlib - \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f</li> </ul>"},{"location":"lab1/main/#_4","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<ul> <li>22 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438</li> </ul>"},{"location":"lab1/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":""},{"location":"lab1/models/#_2","title":"\u0421\u0445\u0435\u043c\u0430 \u0411\u0414","text":""},{"location":"lab1/models/#_3","title":"\u041a\u043e\u0434 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439","text":"<pre><code>from sqlmodel import SQLModel,Field, select, Relationship\nimport pydantic\nfrom db import get_session_func\nfrom enum import Enum\nfrom typing import Optional, Type, List\nimport datetime\n\n\ndef is_in_table(model: Type[SQLModel], field, unique_value):\n    with get_session_func() as session:\n        statement = select(model).where(field == unique_value)\n        result = list(session.exec(statement))\n        return len(result) &gt; 0\n\n\nclass Role(Enum):\n    admin = 'admin'\n    viewer = 'viewer'\n\n\nclass Priority(Enum):\n    low = 0\n    medium = 1\n    high = 2\n\n\n\nclass ProjectUserLink(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    user_id: int = Field(foreign_key='user.id')\n    user: 'User' = Relationship()\n    project_id: int = Field(foreign_key='project.id')\n    project: 'Project' = Relationship()\n    role: Role\n\n\nclass UserInProjectForm(SQLModel):\n    user_id: int\n    role: Role\n\n\nclass UserSuperBase(SQLModel):\n    username: str = Field(unique=True)\n    email: str\n\n    @pydantic.field_validator('email')\n    @classmethod\n    def validate_email(cls, value: str) -&gt; str:\n        pydantic.EmailStr._validate(value)\n        return value\n\n    @pydantic.field_validator('username')\n    @classmethod\n    def validate_username(cls, value: str) -&gt; str:\n        if is_in_table(User, User.username, value):\n            raise ValueError('username is not unique')\n        return value\n\n\nclass UserBase(UserSuperBase):\n    hashed_password: str\n\nclass UserRegister(UserSuperBase):\n    password: str\n\nclass UserLogin(SQLModel):\n    username: str\n    password: str\n\nclass UserGet(SQLModel):\n    username: str\n    email: str\n\n\nclass UserChangePassword(SQLModel):\n    current_password: str\n    new_password: str\n    new_password_verification: str\n\n\nclass User(UserBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    projects: List['Project'] = Relationship(back_populates='users', link_model=ProjectUserLink)\n\n\nclass ProjectBase(SQLModel):\n    title: str\n    description: Optional[str]\n\n\nclass Project(ProjectBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    users: List[User] = Relationship(back_populates='projects', link_model=ProjectUserLink)\n    categories: List['Category'] = Relationship(back_populates='project')\n\n\nclass ProjectWithCalendarEntries(ProjectBase):\n    categories: List['CategoryWithEntries']\n\n\nclass CategoryBase(SQLModel):\n    title: str\n    description: Optional[str]\n\n\nclass Category(CategoryBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    # \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n    project_id: int = Field(foreign_key='project.id')\n    # \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 category.project \u0438 project.categories\n    project: Project = Relationship(back_populates='categories')\n    tasks: List['Task'] = Relationship(back_populates='category')\n\n\nclass CategoryWithBaseTasks(CategoryBase):\n    tasks: List['TaskBase']\n\n\nclass CategoryWithEntries(CategoryBase):\n    tasks: List['TaskWithEntries']\n\n\nclass TaskBase(SQLModel):\n    title: str\n    description: Optional[str]\n    deadline: Optional[int]\n    priority: Priority\n    approximate_time: datetime.time\n\n\nclass Task(TaskBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    category_id: int = Field(foreign_key='category.id')\n    category: Category = Relationship(back_populates='tasks')\n    calendar_entries: List['CalendarEntry'] = Relationship(back_populates='task')\n\n\nclass TaskGet(TaskBase):\n    Category: Category\n\n\n\nclass CalendarEntryBase(SQLModel):\n    start_time: datetime.datetime\n    end_time: datetime.datetime\n\n\nclass CalendarEntry(CalendarEntryBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    task_id: int = Field(foreign_key='task.id')\n    task: Task = Relationship(back_populates='calendar_entries')\n\n\nclass CalendarEntryWithId(CalendarEntryBase):\n    id: int\n\n\nclass TaskWithEntries(TaskBase):\n    calendar_entries: List[CalendarEntryWithId]\n</code></pre>"},{"location":"lab1/practice/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430","text":"<p>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1 - \u0441\u0441\u044b\u043b\u043a\u0430</p> <p>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2/3 - \u0441\u0441\u044b\u043b\u043a\u0430</p>"},{"location":"lab2/main/","title":"\u0427\u0442\u043e \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e?","text":""},{"location":"lab2/main/#_2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0415\u0441\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0411\u0414: </p> <p>\u041c\u043d\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0435\u0451 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 notion. \u0414\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 API. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a API \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0411\u0414 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0442\u044c \u043f\u0440\u0438  \u043f\u043e\u043c\u043e\u0449\u0438 3-\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432:</p> <ul> <li>asyncio</li> <li>threading</li> <li>multiprocessing</li> </ul>"},{"location":"lab2/main/#_3","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"\u2116 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 1 2 3 AsyncIO 5.1 3.6 4.2 Threading 2.409 3.4 3.0 Multiprocessing(4 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430) 8.6 9 7 <p>\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 AsyncIO \u0438 threading. \u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0442\u0435\u043c, \u0447\u0442\u043e \u0432 \u043d\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c. \u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0432\u0432\u043e\u0434\u0430.</p>"},{"location":"lab2/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":""},{"location":"lab2/task1/#asyncio","title":"\u0420\u0435\u043b\u0430\u0437\u0438\u0430\u0446\u0438\u044f \u043d\u0430 asyncIO","text":"<p>\u041a\u043e\u0434: <pre><code>import asyncio\nimport math\nimport time\n\n\nasync def compute_sum(start, end):\n    return sum(range(start, end + 1))\n\n\nasync def compute_with_threading(start, end, n_funcs):\n    coroutines = []\n    step = int(math.ceil((end - start) / n_funcs))\n    start_i = start\n    while start_i &lt;= end:\n        end_i = min(start_i + step, end)\n        coroutine = compute_sum(start_i, end_i)\n        coroutines.append(coroutine)\n        start_i = end_i + 1\n\n    gather_coroutine = asyncio.gather(*coroutines)\n    partial_sums = await gather_coroutine\n    result_sum = sum(partial_sums)\n    return result_sum\n\n\nasync def measure(n_funcs):\n    start_time = time.perf_counter()\n    res = await compute_with_threading(1, 1000000, n_funcs)\n    elapsed = round(time.perf_counter() - start_time, 4)\n    print(f\"Async functions: {n_funcs}; time: {elapsed}; result: {res}\")\n\n\nasync def main():\n    n_funcs_list = [1, 5, 10, 20, 50, 100, 1000]\n    for n_funcs in n_funcs_list:\n        await measure(n_funcs)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>Async functions: 1; time: 0.0793; result: 500000500000\nAsync functions: 5; time: 0.067; result: 500000500000\nAsync functions: 10; time: 0.1418; result: 500000500000\nAsync functions: 20; time: 0.0961; result: 500000500000\nAsync functions: 50; time: 0.1274; result: 500000500000\nAsync functions: 100; time: 0.1254; result: 500000500000\nAsync functions: 1000; time: 0.0747; result: 500000500000\n</code></pre></p> <p>\u0412\u044b\u0432\u043e\u0434: </p> <p>\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043d\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0443 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432 \u043d\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0432\u043e\u043f\u0440\u043e\u0441 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e  \u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438</p>"},{"location":"lab2/task1/#threading","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 threading","text":"<p>\u041a\u043e\u0434: <pre><code>from concurrent.futures import ThreadPoolExecutor\nimport threading\nimport time\nimport math\n\nresult = 0\nresult_lock = threading.Lock()\n\n\ndef compute_sum(start, end):\n    global result\n    sm = sum(range(start, end+1))\n    result_lock.acquire()\n    result += sm\n    result_lock.release()\n\n\ndef compute_with_threading(start, end, n_threads):\n    global result\n    result = 0\n\n    with ThreadPoolExecutor() as executor:\n        step = int(math.ceil((end - start) / n_threads))\n        start_i = start\n        while start_i &lt;= end:\n            end_i = min(start_i + step, end)\n            executor.submit(compute_sum, start_i, end_i)\n            start_i = end_i + 1\n\n    return result\n\n\ndef measure(n_threads):\n    start_time = time.perf_counter()\n    res = compute_with_threading(1, 1000000, n_threads)\n    elapsed = round(time.perf_counter() - start_time, 4)\n    print(f\"Threads: {n_threads}; time: {elapsed}; result: {res}\")\n\n\nif __name__ == \"__main__\":\n    n_threads_list = [1, 5, 10, 20, 50, 100]\n    for n_threads in n_threads_list:\n        measure(n_threads)\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>Threads: 1; time: 0.0827; result: 500000500000\nThreads: 5; time: 0.0713; result: 500000500000\nThreads: 10; time: 0.0787; result: 500000500000\nThreads: 20; time: 0.0807; result: 500000500000\nThreads: 50; time: 0.0717; result: 500000500000\nThreads: 100; time: 0.0668; result: 500000500000\n</code></pre></p> <p>\u0412\u044b\u0432\u043e\u0434: \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0432\u0435\u043d AsyncIO</p>"},{"location":"lab2/task1/#multiprocessing","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 multiprocessing \u0447\u0435\u0440\u0435\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c  <code>multiprocessing.Value</code></p> <p>\u041a\u043e\u0434: <pre><code>import multiprocessing\nimport time\nimport math\n\n\ndef compute_sum(start, end, res_value):\n    sm = sum(range(start, end + 1))\n    res_value.acquire()\n    res_value.value += sm\n    res_value.release()\n\n\ndef compute_with_threading(start, end, n_threads):\n    processes = []\n    values = []\n    step = int(math.ceil((end - start) / n_threads))\n    start_i = start\n    value = multiprocessing.Value(\"q\", 0)\n    while start_i &lt;= end:\n        end_i = min(start_i + step, end)\n\n        process = multiprocessing.Process(\n            target=compute_sum, args=[start_i, end_i, value]\n        )\n        process.start()\n        processes.append(process)\n        start_i = end_i + 1\n\n    for process in processes:\n        process.join()\n\n    return value.value\n\n\ndef measure(n_threads):\n    start_time = time.perf_counter()\n    res = compute_with_threading(1, 1000_000, n_threads)\n    elapsed = round(time.perf_counter() - start_time, 4)\n    print(f\"Processes: {n_threads}; time: {elapsed}; result: {res}\")\n\n\nif __name__ == \"__main__\":\n    n_threads_list = [1, 2, 5, 10]\n    for n_threads in n_threads_list:\n        measure(n_threads)\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>Processes: 1; time: 0.2716; result: 500000500000\nProcesses: 2; time: 0.2046; result: 500000500000\nProcesses: 5; time: 0.2634; result: 500000500000\nProcesses: 10; time: 0.4576; result: 500000500000\nProcesses: 30; time: 0.9976; result: 500000500000\n</code></pre></p> <p>\u0412\u044b\u0432\u043e\u0434:</p> <p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u0430\u0440\u0442\u0438\u043d\u0443 \u043d\u0430 2-5 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445, \u0430 \u043f\u0440\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043f\u0430\u0434\u0430\u0435\u0442. \u042d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0435 \u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438</p>"},{"location":"lab2/task1/#multiprocessing_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 multiprocessing \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c","text":"<p>\u041a\u043e\u0434: <pre><code>import multiprocessing\nimport time\nimport math\n\n\ndef compute_sum(start, end, queue):\n    sm = sum(range(start, end + 1))\n    queue.put(sm)\n\n\ndef compute_with_threading(start, end, n_threads):\n    processes = []\n    step = int(math.ceil((end - start) / n_threads))\n    start_i = start\n    queue = multiprocessing.Queue()\n    while start_i &lt;= end:\n        end_i = min(start_i + step, end)\n        process = multiprocessing.Process(\n            target=compute_sum, args=[start_i, end_i, queue]\n        )\n        process.start()\n        processes.append(process)\n        start_i = end_i + 1\n\n    for process in processes:\n        process.join()\n\n    result = 0\n    while not queue.empty():\n        result += queue.get()\n    return result\n\n\ndef measure(n_threads):\n    start_time = time.perf_counter()\n    res = compute_with_threading(1, 1000000, n_threads)\n    elapsed = round(time.perf_counter() - start_time, 4)\n    print(f\"Processes: {n_threads}; time: {elapsed}; result: {res}\")\n\n\nif __name__ == \"__main__\":\n\n    n_threads_list = [1, 2, 5, 10, 30]\n    for n_threads in n_threads_list:\n        measure(n_threads)\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>Processes: 1; time: 0.2835; result: 500000500000\nProcesses: 2; time: 0.1856; result: 500000500000\nProcesses: 5; time: 0.2023; result: 500000500000\nProcesses: 10; time: 0.3622; result: 500000500000\nProcesses: 30; time: 1.0166; result: 500000500000\n</code></pre></p> <p>\u0412\u044b\u0432\u043e\u0434:</p> <p>\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u043b\u0443\u0448\u0447\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0440\u0438 2-5 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445</p>"},{"location":"lab2/task1/#_1","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>AsyncIO \u0438 threadin \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e. Multiprocessing \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0447\u0443\u0442\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435, \u0432\u0438\u0434\u0438\u043c\u043e \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0438\u0436\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441 \u044d\u0442\u043e\u0433\u043e</p>"},{"location":"lab2/task2_asyncio/","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 AsyncIO","text":"<p>\u041a\u043e\u0434: <pre><code>from dotenv import dotenv_values\nfrom pathlib import Path\nfrom notion_client import AsyncClient\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport models\nfrom sqlalchemy import select\nfrom db_connection import get_session_context\nimport asyncio\nimport requests\nfrom elapsed_logging import logger\nfrom uuid import UUID\n\n\nexercise2_path = Path(__file__).parent.parent\nenv_path = exercise2_path / \".env\"\nconfig = dotenv_values(env_path)\nnotion_secret = config[\"notion_secret\"]\ndb_id = \"7401d3f130414235ab1abb429d41a31e\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjM0NTQ4NzUsImlhdCI6MTcxNTQ1NDg3NSwic3ViIjoidXNlcjEifQ.u4I3i-utbj3gwwlLc9ABIfvKneg-Ri3VzZVkmoNh-Wc\"\n}\n\n\nnotion = AsyncClient(auth=notion_secret)\n\n\nasync def get_task_pages(db_id: str):\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 id \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0411\u0414\n\n    Args:\n        db_id (str): id \u0411\u0414 \u0432 notion\n\n    Returns:\n        list[str]: \u0421\u043f\u0438\u0441\u043e\u043a id \u0441\u0442\u0440\u0430\u043d\u0438\u0446\n    \"\"\"\n    response = await notion.databases.query(db_id)\n    entries_list = response[\"results\"]\n    page_ids = []\n    for entry in entries_list:\n        if entry[\"object\"] == \"page\":\n            page_id = entry[\"id\"]\n            page_ids.append(page_id)\n\n    return page_ids\n\nclass TaskParser:\n    def __init__(self, task_notion: dict) -&gt; None:\n        self.task_notion = task_notion\n\n\n    def get_title(self) -&gt; str | None:\n        title_list = self.get_value_or_none(\n            self.task_notion,\n            [\"Name\", \"title\"]\n        )\n        if len(title_list) == 0:\n            return None\n        title_object = title_list[0]\n        title = self.get_value_or_none(\n            title_object,\n            ['plain_text']\n        )\n        return title\n\n\n    def get_category_title(self) -&gt; str | None:\n        title = self.get_value_or_none(\n            self.task_notion, \n            (\"Tasks\", \"select\", \"name\")\n        )\n        return title\n\n    def get_description(self) -&gt; str | None:\n        return None\n\n    def get_deadline(self) -&gt; str | None:\n        deadline = self.get_value_or_none(\n            self.task_notion, \n            (\"due\", \"date\", \"start\")\n        )\n        return deadline\n\n\n    def get_priority(self) -&gt; models.Priority | None:\n        urgent_flag = self.get_value_or_none(\n            self.task_notion,\n            ['Urgent', 'checkbox']\n        )\n        if urgent_flag:\n            return models.Priority.high\n        return models.Priority.low\n\n    def get_approximate_time(self) -&gt; int | None:\n        approximate_time = self.get_value_or_none(\n            self.task_notion,\n            [\"Aproximate time\", 'number']\n        )\n        if approximate_time is not None:\n            approximate_time = int(approximate_time)\n        return approximate_time\n\n    @staticmethod\n    def get_value_or_none(d, keys_tuple):\n        for key in keys_tuple:\n            if d is None:\n                return None\n            if key not in keys_tuple:\n                return None\n\n            d = d[key]\n        return d\n\nclass TaskWriter: \n    def __init__(self, project_id, category_none_id) -&gt; None:\n        self.project_id = project_id\n        self.category_none_id = category_none_id\n\n    async def write_task_to_db(self, task_notion_id):\n        task_notion = await notion.pages.retrieve(task_notion_id)\n        task_notion = task_notion[\"properties\"]\n        task_notion = TaskParser(task_notion)\n\n        if task_notion.get_title() is None:\n            return\n\n        async with get_session_context() as session:\n            category_id = await self._get_category_id(session, task_notion)\n\n            task_data = {\n                \"category_id\": category_id,  # \u0411\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0438\u0436\u0435\n                \"title\": task_notion.get_title(),\n                \"description\": None,\n                \"deadline\": task_notion.get_deadline(),\n                \"priority\": task_notion.get_priority(),\n                \"approximate_time\": task_notion.get_approximate_time(),\n            }\n            task_object = models.Task.model_validate(task_data)\n            session.add(task_object)\n            await session.commit()\n            await session.refresh(task_object)\n\n\n    async def _get_category_id(self, session, task_notion: TaskParser):\n        category_title = task_notion.get_category_title()\n\n        if category_title is None:\n            return self.category_none_id\n\n        # try to find category with that name\n        category_obj = await self._find_category_obj(\n            session,\n            category_title,\n        )\n\n        if category_obj is None:\n            category_obj = await self._create_category_obj(session, category_title)\n        # Attribute error\n        try:\n            category_id = category_obj.id\n        except AttributeError as e:\n            print(category_obj)\n            raise e\n        return category_id\n\n\n\n    async def _find_category_obj(self, session, category_title):\n        query = (\n            select(models.Category)\n            .where(models.Category.title == category_title)\n            .where(models.Category.project_id == self.project_id)\n        )\n        results = await session.exec(query)\n        category_obj = results.first()\n        if category_obj is not None:\n            category_obj = category_obj[0]\n        return category_obj\n\n    async def _create_category_obj(self, session, category_title):\n        category_data = {\n            \"project_id\": self.project_id,\n            \"title\": category_title,\n            \"description\": None,\n        }\n        category_obj = models.Category.model_validate(category_data)\n        session.add(category_obj)\n        await session.commit()\n        await session.refresh(category_obj)\n        return category_obj\n\nasync def create_project():\n    url = \"http://127.0.0.1:13213/project/\"\n    json_data = {\n        \"title\": \"Notion tasks project async\",\n        \"description\": \"Async notion tasks\",\n    }\n\n    response = requests.post(url, headers=headers, json=json_data).json()\n    project_id = response[\"object\"][\"id\"]\n    return project_id\n\n\nasync def create_none_category(project_id):\n    url = f\"http://127.0.0.1:13213/project/{project_id}/category/\"\n    json_data = {\n        \"title\": \"None category\",\n        \"description\": \"If no category, it falls here\",\n    }\n    response = requests.post(url, headers=headers, json=json_data).json()\n    category_id = response[\"object\"][\"id\"]\n    return category_id\n\n\nasync def main():\n    logger.info(\"\u041d\u0430\u0447\u0430\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\")\n    project_id = await create_project()\n    category_none_id = await create_none_category(project_id)\n    logger.info(\"\u0421\u043e\u0437\u0434\u0430\u043b \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 none task\")\n    task_pages = await get_task_pages(db_id)\n    logger.info(\"\u041f\u043e\u043b\u0443\u0447\u0438\u043b id \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u0430\u0441\u043a\u043e\u0432\")\n    task_writer = TaskWriter(project_id, category_none_id)\n    async with asyncio.TaskGroup() as task_group:\n        for task_id in task_pages:\n            coroutine = task_writer.write_task_to_db(task_id)\n            task_group.create_task(coroutine)\n    logger.info(\"\u0421\u043e\u0431\u0440\u0430\u043b \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0438\u0445 \u0432 \u0411\u0414\")\n\n\n\nif __name__ == \"__main__\":\n    logger.reset_time()\n    asyncio.run(main())\n</code></pre></p>"},{"location":"lab2/task2_auxilary/","title":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438","text":""},{"location":"lab2/task2_auxilary/#_2","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0411\u0414(\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439)","text":"<pre><code>from dotenv import dotenv_values\nfrom contextlib import contextmanager\nfrom pathlib import Path\nfrom sqlmodel import Session, create_engine\nfrom typing import Iterator\n\n\nenv_path = Path(__file__).parent.parent / '.env'\nconfig = dotenv_values(env_path)\ndb_url = config['DB_ADMIN_SYNC']\nengine = create_engine(db_url)\n\n\n@contextmanager\ndef get_session_context() -&gt; Iterator[Session]:\n    session = Session(engine)\n    try:\n        yield session\n    finally:\n        session.close()\n\n# Depends \u0437\u0430\u043c \u043f\u043e\u0437\u0430\u0431\u043e\u0442\u0438\u0442\u0441\u044f \u043e \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0438 \u0441\u0435\u0441\u0441\u0438\u0438, \u043a\u043e\u0433\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\ndef get_session_depends() -&gt; Iterator[Session]:\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lab2/task2_auxilary/#_3","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u0411\u0414(\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439)","text":"<pre><code>from pathlib import Path\n\nfrom dotenv import dotenv_values\nfrom sqlalchemy.ext.asyncio import create_async_engine\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\nfrom sqlmodel import SQLModel\nfrom sqlmodel.ext.asyncio.session import AsyncSession\nfrom contextlib import asynccontextmanager\nfrom typing import AsyncIterator\n\nenv_path = Path(__file__).parent.parent / '.env'\nconfig = dotenv_values(env_path)\ndb_url = config['DB_ADMIN_ASYNC']\n\nasync_engine = create_async_engine(\n    db_url,\n    future=True\n)\n\n\nasync def init_db():\n    async with async_engine.begin() as conn:\n        await conn.run_sync(SQLModel.metadata.create_all)\n\n@asynccontextmanager\nasync def get_session_context() -&gt; AsyncIterator[AsyncSession]:\n    # \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0435\n    session_maker = async_sessionmaker(\n       bind=async_engine, class_=AsyncSession, expire_on_commit=False\n    )\n    session = session_maker()\n    try:\n        yield session\n    finally:\n        await session.close()\n\n\nasync def get_session_depends() -&gt; AsyncIterator[AsyncSession]:\n    # \u0421\u0435\u0441\u0441\u0438\u044f \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 depends \u0432 fastAPI\n    async_session = async_sessionmaker(\n       bind=async_engine, class_=AsyncSession, expire_on_commit=False\n    )\n    async with async_session() as session:\n        yield session\n\n\nasync def engine_dispose():\n    # \u0420\u0430\u0437\u043e\u0440\u0432\u0430\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0411\u0414\n    await async_engine.dispose()\n</code></pre>"},{"location":"lab2/task2_auxilary/#_4","title":"\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code>import logging\nimport time\n\n\n# Custom formatter class\nclass _TimedLogger:\n    \"\"\"Logger class that prefixes each message with elapsed time since instantiation.\"\"\"\n\n    def __init__(self):\n        self.reset_time()\n\n    def reset_time(self):\n        self.start_time = time.time()\n        self.logger = logging.getLogger(\"logger\")\n        self.logger.setLevel(logging.INFO)  # Set the desired default logging level\n\n        # Create a StreamHandler with a custom formatter\n        stream_handler = logging.StreamHandler()\n        stream_handler.setFormatter(self._CustomFormatter(self.start_time))\n\n        # Clear existing handlers to avoid duplicate logs in case of reinitialization\n        self.logger.handlers = []\n        self.logger.addHandler(stream_handler)\n\n    class _CustomFormatter(logging.Formatter):\n        \"\"\"Custom formatter to add time since start to logs.\"\"\"\n\n        def __init__(self, start_time):\n            super().__init__(\"%(message)s\")\n            self.start_time = start_time\n\n        def format(self, record):\n            elapsed_seconds = time.time() - self.start_time\n            # Format time as seconds.milliseconds\n            formatted_time = f\"{int(elapsed_seconds)}.{int((elapsed_seconds - int(elapsed_seconds)) * 1000)}\"\n            # Set the prefix with formatted time\n            record.msg = f\"[{formatted_time}] {record.msg}\"\n            return super().format(record)\n\n    def info(self, msg):\n        self.logger.info(msg)\n\n    def debug(self, msg):\n        self.logger.debug(msg)\n\n\nlogger = _TimedLogger()\n</code></pre>"},{"location":"lab2/task2_auxilary/#_5","title":"\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438","text":"<pre><code>import threading\nfrom sqlalchemy import select\nimport models\n\nclass CategoryManager:\n    def __init__(self, project_id, category_none_id):\n        self._category_none_id = category_none_id\n        self._project_id = project_id\n        self._category_locks = {}\n        self._category_ids = {}\n\n    def _get_lock(self, category):\n        \"\"\"Retrieve a unique lock for each category.\"\"\"\n        if category not in self._category_locks:\n            self._category_locks[category] = threading.Lock()\n        return self._category_locks[category]\n\n    def _find_category_obj_db(self, session, category_title):\n        query = (\n            select(models.Category)\n            .where(models.Category.title == category_title)\n            .where(models.Category.project_id == self._project_id)\n        )\n        results = session.exec(query)\n        category_obj = results.first()\n        if category_obj is None:\n            return None\n        return category_obj[0].id\n\n    def _create_category_obj(self, session, category_title):\n        category_data = {\n            \"project_id\": self._project_id,\n            \"title\": category_title,\n            \"description\": None,\n        }\n        category_obj = models.Category.model_validate(category_data)\n        session.add(category_obj)\n        session.commit()\n        session.refresh(category_obj)\n        return category_obj.id\n\n\n    def _get_id(self, session, category_title):\n\n        category_id = self._category_ids.get(category_title)\n        if category_id is not None:\n            return category_id\n\n        category_id = self._find_category_obj_db(session, category_title)\n        if category_id is not None:\n            return category_id\n\n        category_id = self._create_category_obj(session, category_title)\n        return category_id\n\n    def get_id(self, session, category_title):\n        if category_title is None:\n            return self._category_none_id\n\n        with self._get_lock(category_title):\n            category_id = self._get_id(session, category_title)\n            self._category_ids[category_title] = category_id\n            return category_id\n</code></pre>"},{"location":"lab2/task2_conclusion/","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"\u041f\u043e\u0434\u0445\u043e\u0434/\u043f\u043e\u043f\u044b\u0442\u043a\u0430 1 2 3 AsyncIO 5.1 3.6 4.2 Threading 2.409 3.4 3.0 Multiprocessing(4 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430) 8.6 9 7 <p>\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 AsyncIO \u0438 threading. \u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0442\u0435\u043c, \u0447\u0442\u043e \u0432 \u043d\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c. \u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0432\u0432\u043e\u0434\u0430.</p>"},{"location":"lab2/task2_multiprocessing/","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 multiprocessing","text":"<pre><code>from pathlib import Path\nimport multiprocessing\n\nimport models\nimport requests\nfrom db_connection import get_session_context\nfrom dotenv import dotenv_values\nfrom elapsed_logging import logger\nfrom notion_client import Client\nfrom category_manager import CategoryManager\nfrom task_parser import TaskParser\nimport math\n\n\nexercise2_path = Path(__file__).parent.parent\nenv_path = exercise2_path / \".env\"\nconfig = dotenv_values(env_path)\nnotion_secret = config[\"notion_secret\"]\ndb_id = \"7401d3f130414235ab1abb429d41a31e\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjM0NTQ4NzUsImlhdCI6MTcxNTQ1NDg3NSwic3ViIjoidXNlcjEifQ.u4I3i-utbj3gwwlLc9ABIfvKneg-Ri3VzZVkmoNh-Wc\"\n}\n\n\nnotion = Client(auth=notion_secret)\n\n\ndef get_task_pages(db_id: str):\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 id \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0411\u0414\n\n    Args:\n        db_id (str): id \u0411\u0414 \u0432 notion\n\n    Returns:\n        list[str]: \u0421\u043f\u0438\u0441\u043e\u043a id \u0441\u0442\u0440\u0430\u043d\u0438\u0446\n    \"\"\"\n    response = notion.databases.query(db_id)\n    entries_list = response[\"results\"]\n    page_ids = []\n    for entry in entries_list:\n        if entry[\"object\"] == \"page\":\n            page_id = entry[\"id\"]\n            page_ids.append(page_id)\n\n    return page_ids\n\n\nclass TaskWriter:\n    def __init__(self, category_manager: CategoryManager) -&gt; None:\n        self.category_manager = category_manager\n\n    def write_task_to_db(self, task_notion_id):\n        task_notion = notion.pages.retrieve(task_notion_id)\n        task_notion = task_notion[\"properties\"]\n        task_notion = TaskParser(task_notion)\n        if task_notion.get_title() is None:\n            return\n\n        with get_session_context() as session:\n            category_title = task_notion.get_category_title()\n            category_id = self.category_manager.get_id(session, category_title)\n            task_data = {\n                \"category_id\": category_id,  # \u0411\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0438\u0436\u0435\n                \"title\": task_notion.get_title(),\n                \"description\": None,\n                \"deadline\": task_notion.get_deadline(),\n                \"priority\": task_notion.get_priority(),\n                \"approximate_time\": task_notion.get_approximate_time(),\n            }\n            task_object = models.Task.model_validate(task_data)\n            session.add(task_object)\n            session.commit()\n            session.refresh(task_object)\n\n\ndef create_project():\n    url = \"http://127.0.0.1:13213/project/\"\n    json_data = {\n        \"title\": \"Notion tasks project threading\",\n        \"description\": \"Threading notion tasks\",\n    }\n\n    response = requests.post(url, headers=headers, json=json_data).json()\n    project_id = response[\"object\"][\"id\"]\n    return project_id\n\n\ndef create_none_category(project_id):\n    url = f\"http://127.0.0.1:13213/project/{project_id}/category/\"\n    json_data = {\n        \"title\": \"None category\",\n        \"description\": \"If no category, it falls here\",\n    }\n    response = requests.post(url, headers=headers, json=json_data).json()\n    category_id = response[\"object\"][\"id\"]\n    return category_id\n\n\ndef handle_tasks_in_process(task_ids, task_writer):\n    for task_id in task_ids:\n        task_writer.write_task_to_db(task_id)\n\n\ndef handle_tasks_with_threading(task_ids, task_writer, n_threads):\n    start = 0\n    end = len(task_ids)\n    step = int(math.ceil((end - start) / n_threads))\n\n    start_i = start\n    processes = []\n    while start_i &lt;= end:\n        end_i = min(start_i + step, end)\n\n        process = multiprocessing.Process(\n            target=handle_tasks_in_process,\n            args=[task_ids[start_i : end_i + 1], task_writer],\n        )\n        process.start()\n        processes.append(process)\n        start_i = end_i + 1\n\n    for process in processes:\n        process.join()\n\n\ndef main():\n    logger.reset_time()\n    logger.info(\"\u041d\u0430\u0447\u0430\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\")\n\n    project_id = create_project()\n    category_none_id = create_none_category(project_id)\n    logger.info(\"\u0421\u043e\u0437\u0434\u0430\u043b \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 none task\")\n\n    task_ids = get_task_pages(db_id)\n    logger.info(\"\u041f\u043e\u043b\u0443\u0447\u0438\u043b id \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u0430\u0441\u043a\u043e\u0432\")\n\n    category_manager = CategoryManager(project_id, category_none_id)\n    task_writer = TaskWriter(category_manager)\n    handle_tasks_with_threading(task_ids, task_writer, 4)\n\n    logger.info(\"\u0421\u043e\u0431\u0440\u0430\u043b \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0438\u0445 \u0432 \u0411\u0414\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab2/task2_threading/","title":"Task2 threading","text":""},{"location":"lab2/task2_threading/#threading","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 threading","text":"<pre><code>from pathlib import Path\nfrom concurrent.futures import ThreadPoolExecutor\n\nimport models\nimport requests\nfrom db_connection import get_session_context\nfrom dotenv import dotenv_values\nfrom elapsed_logging import logger\nfrom notion_client import Client\nfrom category_manager import CategoryManager\nfrom task_parser import TaskParser\n\n\nexercise2_path = Path(__file__).parent.parent\nenv_path = exercise2_path / \".env\"\nconfig = dotenv_values(env_path)\nnotion_secret = config[\"notion_secret\"]\ndb_id = \"7401d3f130414235ab1abb429d41a31e\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjM0NTQ4NzUsImlhdCI6MTcxNTQ1NDg3NSwic3ViIjoidXNlcjEifQ.u4I3i-utbj3gwwlLc9ABIfvKneg-Ri3VzZVkmoNh-Wc\"\n}\n\n\nnotion = Client(auth=notion_secret)\n\n\ndef get_task_pages(db_id: str):\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 id \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0411\u0414\n\n    Args:\n        db_id (str): id \u0411\u0414 \u0432 notion\n\n    Returns:\n        list[str]: \u0421\u043f\u0438\u0441\u043e\u043a id \u0441\u0442\u0440\u0430\u043d\u0438\u0446\n    \"\"\"\n    response = notion.databases.query(db_id)\n    entries_list = response[\"results\"]\n    page_ids = []\n    for entry in entries_list:\n        if entry[\"object\"] == \"page\":\n            page_id = entry[\"id\"]\n            page_ids.append(page_id)\n\n    return page_ids\n\n\nclass TaskWriter:\n    def __init__(self, category_manager: CategoryManager) -&gt; None:\n        self.category_manager = category_manager\n\n    def write_task_to_db(self, task_notion_id):\n        task_notion = notion.pages.retrieve(task_notion_id)\n        task_notion = task_notion[\"properties\"]\n        task_notion = TaskParser(task_notion)\n        if task_notion.get_title() is None:\n            return\n\n        with get_session_context() as session:\n            category_title = task_notion.get_category_title()\n            category_id = self.category_manager.get_id(session, category_title)\n            task_data = {\n                \"category_id\": category_id,  # \u0411\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0438\u0436\u0435\n                \"title\": task_notion.get_title(),\n                \"description\": None,\n                \"deadline\": task_notion.get_deadline(),\n                \"priority\": task_notion.get_priority(),\n                \"approximate_time\": task_notion.get_approximate_time(),\n            }\n            task_object = models.Task.model_validate(task_data)\n            session.add(task_object)\n            session.commit()\n            session.refresh(task_object)\n\n\ndef create_project():\n    url = \"http://127.0.0.1:13213/project/\"\n    json_data = {\n        \"title\": \"Notion tasks project threading\",\n        \"description\": \"Threading notion tasks\",\n    }\n\n    response = requests.post(url, headers=headers, json=json_data).json()\n    project_id = response[\"object\"][\"id\"]\n    return project_id\n\n\ndef create_none_category(project_id):\n    url = f\"http://127.0.0.1:13213/project/{project_id}/category/\"\n    json_data = {\n        \"title\": \"None category\",\n        \"description\": \"If no category, it falls here\",\n    }\n    response = requests.post(url, headers=headers, json=json_data).json()\n    category_id = response[\"object\"][\"id\"]\n    return category_id\n\n\ndef main():\n    logger.reset_time()\n    logger.info(\"\u041d\u0430\u0447\u0430\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\")\n\n    project_id = create_project()\n    category_none_id = create_none_category(project_id)\n    logger.info(\"\u0421\u043e\u0437\u0434\u0430\u043b \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 none task\")\n\n    task_pages = get_task_pages(db_id)\n    logger.info(\"\u041f\u043e\u043b\u0443\u0447\u0438\u043b id \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u0430\u0441\u043a\u043e\u0432\")\n\n    category_manager = CategoryManager(project_id, category_none_id)\n    task_writer = TaskWriter(category_manager)\n    with ThreadPoolExecutor() as executor:\n        results = executor.map(task_writer.write_task_to_db, task_pages)\n    try:\n        for result in results:\n            pass\n    except Exception as e:\n        print(e)\n    logger.info(\"\u0421\u043e\u0431\u0440\u0430\u043b \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0438\u0445 \u0432 \u0411\u0414\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab3/implementation/","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":""},{"location":"lab3/implementation/#_2","title":"\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u043d\u043e?","text":"<p>\u041c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443:</p> <ul> <li>postgres<ul> <li>Dockerfile</li> </ul> </li> <li>app_main<ul> <li>app</li> <li>Dockerfile</li> </ul> </li> <li>app_parser<ul> <li>parser_threadingP<ul> <li>main.py</li> <li>...</li> </ul> </li> <li>setup.py</li> <li>tasks.py</li> <li>main.py</li> <li>Dockerfile</li> </ul> </li> <li>docker-compose.yaml</li> </ul> <p>\u0418 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f docker-compose.yaml \u0444\u0430\u0439\u043b\u0430:</p> <pre><code>services:\n  postgres:\n    # \u0421\u0441\u044b\u043b\u0430\u043a\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u0430\u043f\u043a\u0443 \u0441 postgres\n    build: postgres/\n    # \u0411\u0414 \u043d\u0430 \u0445\u043e\u0441\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u043f\u043e \u043f\u043e\u0440\u0442\u0443 5100\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres -d task_manager\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_period: 20s\n    ports:\n      - 5100:5432\n\n\n  app_main:\n    build: app_main/\n    ports:\n      - 8100:8100\n    depends_on:\n      postgres:\n        condition: service_healthy\n        # \u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0435\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043b\u0441\u044f\n        restart: true\n\n\n  redis:\n    image: 'redis:alpine'\n    ports:\n      - 6379:6379\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_period: 5s\n\n  celery:\n    build: app_parser/\n    command: \"celery -A tasks:celery worker -l info\"\n    healthcheck:\n      test: celery -A tasks:celery  status\n      interval: 10s\n      timeout: 10s\n      retries: 10\n      start_period: 5s\n    depends_on:\n      redis:\n        condition: service_healthy\n\n  app_parser:\n    build: app_parser/\n    ports:\n      - 8200:8200\n    command: \"fastapi run main.py --proxy-headers --port 8200\"  \n    depends_on:\n      app_main:\n        condition: service_started\n      celery:\n        condition: service_healthy\n</code></pre>"},{"location":"lab3/implementation/#_3","title":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0411\u0414","text":"<p>Dockerfile \u0434\u043b\u044f postgres</p> <pre><code>FROM postgres\nENV POSTGRES_PASSWORD 786811\nENV POSTGRES_DB task_manager\nEXPOSE 5432\n</code></pre>"},{"location":"lab3/implementation/#api","title":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f API \u0434\u043b\u044f \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0437\u0430\u0434\u0430\u0447","text":"<p>Dockerfile \u0434\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>FROM python:3.12.3-alpine3.19\n# requirements \u0438\u0434\u0443\u0442 \u043f\u0435\u0440\u0432\u044b\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u043a\u044d\u0448 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u043b\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n# \u0422\u043e \u0435\u0441\u0442\u044c \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0432 app \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 requirements,\n# requirements \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f  \u0437\u0430\u043d\u043e\u0432\u043e, \u0430 \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u043a\u044d\u0448\u0430\nCOPY ./app/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n# copy app\nWORKDIR /app\nCOPY /app .\nEXPOSE 8100\nCMD [\"fastapi\", \"run\", \"/app/endpoints/endpoints.py\", \"--proxy-headers\", \"--port\", \"8100\"]\n</code></pre> <p>\u0412 <code>docker-compose.yaml</code> \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>  app_main:\n    build: app_main/\n    ports:\n      - 8100:8100\n    depends_on:\n      postgres:\n        condition: service_healthy\n        # \u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0435\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043b\u0441\u044f\n        restart: true\n</code></pre>"},{"location":"lab3/implementation/#_4","title":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430","text":"<pre><code>FROM python:3.12.3-alpine3.19\n# install requirements\nCOPY ./requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY ./parser_threading ./parser_threading\nRUN pip install -e ./parser_threading\n\nCOPY ./main.py .\nCOPY ./tasks.py .\n# set ENV variable for backend\nENV BACKEND_URL=\"http://app_main:8100\"\n# run parser fastapi app\nEXPOSE 8200\nCMD [\"fastapi\", \"run\", \"main.py\", \"--proxy-headers\", \"--port\", \"8200\"]\n</code></pre>"},{"location":"lab3/implementation/#celery-redis-app_parser","title":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f celery, redis \u0438 app_parser","text":"<p>\u0412 docker-compose \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u044b:</p> <pre><code>  redis:\n    image: 'redis:alpine'\n    ports:\n      - 6379:6379\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_period: 5s\n\n  celery:\n    build: app_parser/\n    command: \"celery -A tasks:celery worker -l info\"\n    healthcheck:\n      test: celery -A tasks:celery  status\n      interval: 10s\n      timeout: 10s\n      retries: 10\n      start_period: 5s\n    depends_on:\n      redis:\n        condition: service_healthy\n\n  app_parser:\n    build: app_parser/\n    ports:\n      - 8200:8200\n    command: \"fastapi run main.py --proxy-headers --port 8200\"  \n    depends_on:\n      app_main:\n        condition: service_started\n      celery:\n        condition: service_healthy\n</code></pre> <p>\u041d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0433\u043e\u0442\u043e\u0432\u043e \u043a \u0440\u0430\u0431\u043e\u0442\u0435!</p>"},{"location":"lab3/main/","title":"\u0427\u0442\u043e \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e?","text":""},{"location":"lab3/main/#_2","title":"\u0426\u0435\u043b\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0443 \u043d\u0430\u0441 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e:</p> <ul> <li>Backend \u0434\u043b\u044f \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0437\u0430\u0434\u0430\u0447 \u043d\u0430 FastAPI</li> <li>\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 PostgreSQL</li> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 notion</li> </ul> <p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u0441\u0435\u0440\u043e\u043c \u0438 backend-\u043e\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0437\u0430\u0434\u0430\u0447. \u0426\u0435\u043b\u044c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 <code>docker compose</code></p> <p>\u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 <code>celery</code> \u0438 <code>redis</code>, \u0438\u0431\u043e  \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043e\u043b\u0433\u043e</p>"},{"location":"lab3/main/#_3","title":"\u041c\u0438\u0440\u043e\u043a\u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<ul> <li>\u0411\u0414 \u043d\u0430 PostgreSQL</li> <li>FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0430</li> <li>FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430</li> <li>Redis \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447</li> <li>Celery \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447</li> </ul>"}]}